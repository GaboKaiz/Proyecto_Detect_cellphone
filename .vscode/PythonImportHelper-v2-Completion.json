[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "init_db",
        "kind": 2,
        "importPath": "server.py",
        "description": "server.py",
        "peekOfCode": "def init_db():\n    conn = mysql.connector.connect(**db_config)\n    cursor = conn.cursor()\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS detections (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            device VARCHAR(50),\n            date_time DATETIME,\n            image_path VARCHAR(255)\n        )",
        "detail": "server.py",
        "documentation": {}
    },
    {
        "label": "save_detection",
        "kind": 2,
        "importPath": "server.py",
        "description": "server.py",
        "peekOfCode": "def save_detection(device, image_path):\n    conn = mysql.connector.connect(**db_config)\n    cursor = conn.cursor()\n    date_time = datetime.now()\n    cursor.execute(\n        \"INSERT INTO detections (device, date_time, image_path) VALUES (%s, %s, %s)\",\n        (device, date_time, image_path)\n    )\n    conn.commit()\n    cursor.close()",
        "detail": "server.py",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "server.py",
        "description": "server.py",
        "peekOfCode": "app = FastAPI()\n# Configurar CORS para permitir solicitudes desde React\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:3000\"],  # Dirección de tu app React\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n# Configuración de la base de datos MySQL",
        "detail": "server.py",
        "documentation": {}
    },
    {
        "label": "db_config",
        "kind": 5,
        "importPath": "server.py",
        "description": "server.py",
        "peekOfCode": "db_config = {\n    'host': 'localhost',\n    'user': 'root',  # Cambia por tu usuario de MySQL\n    'password': '',  # Cambia por tu contraseña de MySQL\n    'database': 'cellphone_db'\n}\n# Crear la carpeta para guardar imágenes si no existe\nos.makedirs(\"imagenes\", exist_ok=True)\n# Conectar a la base de datos y crear la tabla si no existe\ndef init_db():",
        "detail": "server.py",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "server.py",
        "description": "server.py",
        "peekOfCode": "model = YOLO('yolov8s.pt')\nconfidence_threshold = 0.8\nimage_counter = 1  # Para nombrar imágenes como imagen1.jpg, imagen2.jpg, etc.\n# Función para guardar en la base de datos\ndef save_detection(device, image_path):\n    conn = mysql.connector.connect(**db_config)\n    cursor = conn.cursor()\n    date_time = datetime.now()\n    cursor.execute(\n        \"INSERT INTO detections (device, date_time, image_path) VALUES (%s, %s, %s)\",",
        "detail": "server.py",
        "documentation": {}
    },
    {
        "label": "confidence_threshold",
        "kind": 5,
        "importPath": "server.py",
        "description": "server.py",
        "peekOfCode": "confidence_threshold = 0.8\nimage_counter = 1  # Para nombrar imágenes como imagen1.jpg, imagen2.jpg, etc.\n# Función para guardar en la base de datos\ndef save_detection(device, image_path):\n    conn = mysql.connector.connect(**db_config)\n    cursor = conn.cursor()\n    date_time = datetime.now()\n    cursor.execute(\n        \"INSERT INTO detections (device, date_time, image_path) VALUES (%s, %s, %s)\",\n        (device, date_time, image_path)",
        "detail": "server.py",
        "documentation": {}
    },
    {
        "label": "image_counter",
        "kind": 5,
        "importPath": "server.py",
        "description": "server.py",
        "peekOfCode": "image_counter = 1  # Para nombrar imágenes como imagen1.jpg, imagen2.jpg, etc.\n# Función para guardar en la base de datos\ndef save_detection(device, image_path):\n    conn = mysql.connector.connect(**db_config)\n    cursor = conn.cursor()\n    date_time = datetime.now()\n    cursor.execute(\n        \"INSERT INTO detections (device, date_time, image_path) VALUES (%s, %s, %s)\",\n        (device, date_time, image_path)\n    )",
        "detail": "server.py",
        "documentation": {}
    }
]